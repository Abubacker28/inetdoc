<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
          "/usr/share/xml/docbook/schema/dtd/5.0/docbook.dtd" [

<!ENTITY author 	SYSTEM	"author.xml">
<!ENTITY legal		SYSTEM  "legal.xml">

<!-- urls -->
<!ENTITY url.fop
  '<link xmlns="http://docbook.org/ns/docbook" xlink:href="http://xmlgraphics.apache.org/fop/">
  <citetitle>Apache FOP (Formatting Objects Processor)</citetitle></link>'>

<!ENTITY url.openjdk
  '<link xmlns="http://docbook.org/ns/docbook" xlink:href="http://openjdk.java.net/">
  <citetitle>OpenJDK</citetitle></link>'>

<!ENTITY url.README
  '<link xmlns="http://docbook.org/ns/docbook" xlink:href="http://www.linux-france.org/~platu/README.html">
  <citetitle>ChangeLog inetdoc.LiNUX</citetitle></link>'>
]>

<article xml:id="autodoc" xml:lang="fr">
<info>
  <title>Autodocumentation inetdoc</title>
  &author;
  <abstract>
    <para>Le projet <citetitle>inetdoc.LiNUX</citetitle> ne contient pas de
    code de logiciel ; juste des documents, des images et les
    <wordasword>Makefiles</wordasword> de traitement.  Voici quelques
    indications sur l'installation d'une copie du projet. Il s'agit juste de
    générer les pages web et les versions imprimables des documents.</para>
  </abstract>
  <keywordset>
    <keyword>inetdoc</keyword>
    <keyword>GNU</keyword>
    <keyword>Linux</keyword>
    <keyword>Make</keyword>
    <keyword>docbook</keyword>
    <keyword>fop</keyword>
    <keyword>xml</keyword>
    <keyword>xsl</keyword>
    <keyword>xsl-fo</keyword>
    <keyword>xsltproc</keyword>
  </keywordset>
</info>

<sect1 xml:id="autodoc.legal.meta">
  &legal;
  <sect2 xml:id='autodoc.meta'>
    <title>Méta-information</title>

    <para>Cet article est écrit avec 
    <link xlink:href="http://www.docbook.org"><citetitle>DocBook</citetitle></link> XML
    sur un système
    <link xlink:href="http://www.debian.org"><citetitle>Debian GNU/Linux</citetitle></link>.
    Il est disponible en version imprimable aux formats PDF et Postscript :
    <link xlink:href="http://www.inetoc.net/pdf/__printbasename__"><literal>__printbasename__</literal></link>.</para>
  </sect2>
</sect1>

<sect1 xml:id='autodoc.quickstart'>
  <title>Installation rapide</title>

  <para>L'installation à partir de sources génère les pages web et les versions
  imprimables des documents du projet
  <citetitle>inetdoc.LiNUX</citetitle>.</para>

  <para>Pour consulter les pages web vous aurez besoin d'un serveur web
  configuré pour permettre l'utilisation des pages personnelles. Le répertoire
  cible par défaut est : <filename
  class='directory'>~/public_html/prj/inetdoc</filename>.</para>
  
  <para>Les versions imprimables des documents sont elles aussi placées dans
  l'arborescence de page web personnelle. Le répertoire cible est :
  <filename
  class='directory'>~/public_html/prj/inetdoc/telechargement/</filename>.</para>

  <para>Voici la procédure à suivre :</para>
<screen width='80'>$ wget http://www.linux-france.org/prj/inetdoc/telechargement/inetdoc.src.tar.bz2
$ tar xvjf inetdoc.src.tar.bz2
$ cd lfo/prj/inetdoc
$ make ; make
</screen>

  <para>Et voilà, après quelques instants, vous disposez d'une copie
  locale du projet sur votre disque.</para>
  
  <para>Comment ? L'exécution de la commande <command>make</command>
  échoue avec un message d'erreur. Y aurait-il un problème de dépendance ?
  Une application absente ? Vous n'avez qu'à consulter les sections
  suivantes ;-)).</para>
</sect1>

<sect1 xml:id='autodoc.install.directory'>
  <title>Arborescence d'installation</title>

  <para>L'installation par défaut utilise la page personnelle de
  l'utilisateur actif comme racine : <filename
  class='directory'>~/public_html/prj/inetdoc</filename>.</para>

  <para>Voir la variable <varname>HTML_WRK</varname> dans le fichier
  <filename>Makefile.Rules</filename> pour modifier ce répertoire par
  défaut.</para>

<screen width='80'>.
|-- articles
|   |-- adressage.ipv4
|   |-- devmgmt
|   |-- ethernet
|   |-- modelisation
|   |-- reseau.libre
|   |-- rnis
|   |-- segmentation.lan
|   |-- stockage
|   `-- transmission.tcpip
|-- cours
|   |-- admin.reseau.dns
|   |-- admin.reseau.dns-dhcp
|   |-- admin.reseau.fs
|   |-- admin.reseau.neigh
|   |-- admin.reseau.nfs
|   |-- admin.reseau.nis
|   |-- admin.reseau.synthese-dns
|   |-- admin.reseau.synthese-nfs3-nis
|   |-- admin.reseau.tp
|   |-- archi.tp
|   |-- config.interface
|   |-- explore.gnulinux
|   |-- interco.access-control.tp
|   |-- interco.noyau
|   |-- interco.noyau.synthese
|   |-- interco.noyau.tp
|   |-- interco.ppp.tp
|   |-- interco.rawip.tp
|   |-- interconnexion.fonctions.noyau
|   |-- interconnexion.perimetres
|   |-- intro.analyse
|   |-- routage.inter-vlan
|   |-- services_internet
|   `-- socket.udp.cpp
|-- formations
|   |-- explore.gnulinux
|   |-- fc.cnes
|   |-- m1-stri
|   |-- m2-stri
|   |-- polycop
|   `-- pourquoi.gnulinux
|-- guides
|   |-- Advanced-routing-Howto -> lartc
|   |-- NAT-HOWTO
|   |-- iptables-tutorial
|   |-- lartc
|   |-- netfilter-hacking-HOWTO
|   |-- networking-concepts-HOWTO
|   |-- packet-filtering-HOWTO
|   |-- rnis
|   |-- zebra.ospf
|   |-- zebra.rip
|   `-- zebra.statique
|-- images
|-- liens
|-- notice.legale
|-- securite
|   |-- amavisd-new
|   `-- tutoriel
|-- sources
|   `-- files
`-- telechargement
    `-- xml
</screen>
</sect1>

<sect1 xml:id='autodoc.install.packages'>
  <title>Applications utilisées</title>

  <para>Les <filename>Makefile</filename>s de l'arborescence servent à
    générer les pages web et les versions imprimables des documents. Ces
    documents utilisent plusieurs formats sources différents. Chaque format
    source nécessite une chaîne de développement spécifique.</para>
    
    <para>Les fichiers sources des documents du projet utilisent les
    formats : <link linkend='html'>HTML</link>, <link
    linkend='xml.docbook'>DocBook XML</link>, <link
    linkend='linuxdoc'>LinuxDoc</link>, <link linkend='slides'>MagicPoint</link>
    et <link linkend='slides'>OpenOffice Impress</link>.  Voici, pour chaque type
    de source, la liste des paquets/applications associées.  Les noms de
    paquets sont ceux de la distribution <link
    xlink:href='http://www.debian.org'><citetitle>Debian</citetitle></link>.</para>

    <para>Pour installer le tout :</para>
<screen width='80'># apt-get install perl sed tidy xsltproc fop \
> libxml2-utils docbook docbook-xml docbook-xsl docbook-utils \
> linuxdoc-tools linuxdoc-tools-latex mgp gs xpdf tetex tetex-extra
</screen>

    <para>Quelques indications sur les paquets en question :</para>
    <variablelist>
      <varlistentry xml:id='html'>
      <term>Documents source de type (X)HTML</term>
      <listitem>
      <itemizedlist>
        <listitem>
	  <para><application>sed</application> :
	  The GNU sed stream editor. Corrections manuelles de balises,
	  (insertion|extraction) de fichiers patrons.</para>
	</listitem>
        <listitem>
	  <para><application>tidy</application> : outil de validation
	  syntaxique et de mise en forme des fichiers
	  <acronym>(X)HTML</acronym>.</para>
	</listitem>
      </itemizedlist>
      </listitem>
      </varlistentry>
      <varlistentry xml:id='xml.docbook'>
      <term>Documents source de type DocBook XML</term>
      <listitem>
      <itemizedlist>
        <listitem>
	  <para><application>libxml2-utils</application> : outil
	  <command>xmllint</command> de validation syntaxique, de remise en
	  forme des documents <acronym>XML</acronym> et de fusion des entités
	  DocBook <acronym>XML</acronym>.</para>
	</listitem>
        <listitem>
	  <para><application>docbook-xml</application> : système de
	  représentation <acronym>XML</acronym> standard pour les documents
	  techniques. Ce système est une «collection» de balises qui permet de
	  structurer un document en chapitres, sections, listes, etc.</para>
	</listitem>
        <listitem>
	  <para><application>docbook-xsl</application> : feuilles de
	  styles <acronym>XSL</acronym> standard pour la transformation des
	  fichiers sources DocBook <acronym>XML</acronym> vers les formats
	  <acronym>(X)HTML</acronym> et <acronym>FO</acronym>.</para>
	</listitem>
      </itemizedlist>
      </listitem>
      </varlistentry>
      <varlistentry xml:id='linuxdoc'>
      <term>Documents source de type LinuxDoc</term>
      <listitem>
      <itemizedlist>
        <listitem>
	  <para><application>linuxdoc-tools</application> : conversion
	  <acronym>SGML</acronym> pour les documents écrits avec le jeu de
	  définitions LinuxDoc <acronym>DTD</acronym>. Ce jeu de définition est
	  utilisé pour la publication de documentations «historiques» telles
	  que les <wordasword>Howtos Netfilter</wordasword>.</para>
	</listitem>
      </itemizedlist>
      </listitem>
      </varlistentry>
      <varlistentry xml:id='slides'>
      <term>Présentations</term>
      <listitem>
      <itemizedlist>
        <listitem>
	  <para><citetitle>MagicPoint</citetitle> ou
	  <application>mgp</application> : outil de présentation de
	  vues/transparents basé sur les bibliothèques graphiques du projet
	  <citetitle>X.Org</citetitle>.</para>
	</listitem>
	<listitem>
	  <para><citetitle>OpenOffice.org Impress</citetitle> : outil de
	  présentation de vues/transparents de la suite
	  <citetitle>OpenOffice.org</citetitle>.</para>
	</listitem>
      </itemizedlist>
      </listitem>
      </varlistentry>
      <varlistentry xml:id='print'>
      <term>Formats imprimables PDF et Postscript</term>
      <listitem>
      <itemizedlist>
        <listitem>
	  <para><application>fop</application> ou <wordasword>fo
	  processor</wordasword> : transformation des fichiers sources
	  DocBook <acronym>XML</acronym> vers le format
	  <acronym>PDF</acronym>.</para> 
	</listitem>
        <listitem>
	  <para><application>xpdf</application> : outils de traitement des
	  fichiers Postscript et PDF.</para>
	</listitem>
      </itemizedlist>
      </listitem>
      </varlistentry>
    </variablelist>
</sect1>

<sect1 xml:id='autodoc.install.custom.java'>
  <title>Génération des fichiers PDF avec FOP et Java </title>

  <para>&url.fop; est l'outil qui permet
  de générer les versions imprimables au format <acronym>PDF</acronym> à partir
  des documents sources DocBook <acronym>XML</acronym> et d'une feuille de
  styles <acronym>XSL-FO</acronym>. Ce processeur est développé en
  <application>Java</application> et c'est incontestablement l'outil libre le
  plus avancé sur la production de versions imprimables.</para>

  <para>La version du <wordasword>Java Runtime Environment</wordasword>
  (<acronym>JRE</acronym>) influe beaucoup sur le fonctionnement de
  <application>fop</application>. Par conséquent, il est préférable
  d'utiliser une version la plus récente possible. Dans ce document on s'appuie
  sur les paquets construits à partir de la version libre de la chaîne de
  développement <application>Java</application> baptisée &url.openjdk;.</para>

  <sect2 xml:id='autodoc.install.custom.java.debian'>
    <title>Paquets Java Debian</title>

  <para>Pour une installation <application>Java</application> «standard»
  comprenant la chaîne de développement, on obtient la liste
  suivante :</para>

<screen width='80'><prompt>$</prompt> dpkg -l *openjdk* | grep ^ii
ii  openjdk-6-jdk           6b16-1.6.1-2  OpenJDK Development Kit (JDK)
ii  openjdk-6-jre           6b16-1.6.1-2  OpenJDK Java runtime, using Hotspot JIT
ii  openjdk-6-jre-headless  6b16-1.6.1-2  OpenJDK Java runtime, using Hotspot JIT (headless)
ii  openjdk-6-jre-lib       6b16-1.6.1-2  OpenJDK Java runtime (architecture independent libraries)
</screen>

  <para>Comme il est possible de faire coexister plusieurs versions de la
  chaîne de développement <application>Java</application> sur le même système,
  on doit s'assurer que la version voulue sera bien utilisée par les autres
  outils.</para>

<note>
  <para>Avec cette version libre de <application>Java</application>, le fameux
  <wordasword>plugin</wordasword> est fourni avec le paquet baptisé
  <systemitem>icedtea6-plugin</systemitem>.</para>
</note>

<screen width='80'><prompt>#</prompt># update-java-alternatives -v --jre --plugin -s java-6-openjdk
resetting java alternatives
</screen>

  <para>Il reste ensuite à vérifier que le paquet correspondant au processeur
  <application>fop</application> est bien installé :</para>

<screen width='80'># dpkg -l fop* | grep ^ii
ii  fop               1:0.95.dfsg-5       XML to PDF Translator
</screen>

  </sect2>

  <sect2 xml:id='autodoc.install.fop.svn'>
    <title>Installation de fop à partir du dépôt SVN</title>

  <para>Pour bénéficier des toutes dernières avancées sur le développement de
  <application>fop</application>, il est nécessaire de construire l'outil à
  partir de ses autodoc. Pour ce faire, il faut télécharger les sources à
  partir du dépôt du serveur <application>Subversion</application> du projet.
  On passe ensuite au opérations de construction avec
  <application>ant</application>, l'équivalent de
  <application>make</application> dans l'environnement
  <application>Java</application>.</para>
  
  <para>La récupération de l'arborescence des sources du projet
  <application>fop</application> se fait avec <application>svn</application> la
  commande principale du paquet
  <application>subversion</application> :</para>

<screen width='80'>:~$ mkdir ~/SVN/fop
:~$ cd ~/SVN/fop/
:~/SVN/fop$ svn co https://svn.apache.org/repos/asf/xmlgraphics/fop/trunk
&lt;snip/>
A    trunk/examples/embedding/README
A    trunk/examples/embedding/build.xml
 U   trunk
 Révision 410929 extraite.
</screen>

   <para>Après ce téléchargement initial, toutes les opérations de mises à jour
   se font à l'aide de la commande <userinput>svn update</userinput>.</para>

   <para>On construit ensuite le processeur à l'aide des directives données à
   la commande <application>ant</application>. La première instruction
   <userinput>ant clean</userinput> élimine toute trace de fichiers
   binaires issus de la construction précédente et la seconde
   <userinput>ant package</userinput> construit les paquets
   <application>jar</application> nécessaires à l'utilisation de
   <application>fop</application>.</para>

   <para>Nettoyage de l'arborescence de développement.</para>

<screen width='80'><prompt>:~/SVN/fop/trunk$</prompt> ant clean
Buildfile: build.xml

clean:
   [delete] Deleting directory /home/phil/SVN/fop/trunk/build

   BUILD SUCCESSFUL
   Total time: 0 seconds</screen>

   <para>Compilation de la nouvelle version de
   <application>fop</application>.</para>

<screen width='80'><prompt>:~/SVN/fop/trunk$</prompt> ant package
Buildfile: /home/phil/SVN/fop/trunk/build.xml
Trying to override old definition of task javac
Trying to override old definition of task junit

init-avail:
     [echo] ------------------- Apache FOP svn-trunk [1999-2010] ----------------
     [echo] See build.properties and build-local.properties for additional build settings
     [echo] Apache Ant version 1.8.0 compiled on March 11 2010
     [echo] VM: 19.1-b02, Sun Microsystems Inc.
     [echo] JAVA_HOME: ${env.JAVA_HOME}
     [echo] JAI Support NOT Present
     [echo] JCE Support PRESENT
     [echo] JUnit Support PRESENT
     [echo] XMLUnit Support PRESENT

init:
&lt;snip/>

package:

BUILD SUCCESSFUL
Total time: 8 seconds</screen>

  <para>On peut maintenant vérifier que l'outil est disponible.</para>

<screen width='80'><prompt>:~/SVN/fop/trunk$</prompt> ./fop -version
FOP Version svn-trunk</screen>

  <para>Dernière étape essentielle, il faut positionner la variable
  <varname>FOP</varname> fichier principal des règles de génération des pages
  <acronym>XHTML</acronym> et des fichiers imprimables :
  <filename>Makefile.Rules</filename>.</para>

<screen width='80'># fop -> Génération FO-PDF
FOP=~/SVN/fop/trunk/fop
</screen>

  <para>Voilà, c'est prêt !. On dispose maintenant d'un processeur qui va
  permettre de générer des documents <acronym>PDF</acronym> en quantités
  industrielles. Il ne reste plus qu'à rédiger ;)).</para>
  </sect2>
</sect1>

<sect1 xml:id="autodoc.add.document">
  <title>Ajout d'un nouveau document</title>

  <para>Pour ajouter un nouveau document, il faut créer un répertoire dans
  lequel on place le fichier source et un <filename>Makefile</filename> pour
  automatiser les traitements.</para>
  
  <sect2 xml:id="autodoc.add.document.Makefile">
    <title>Contenu d'un Makefile</title>

  <para>Voici un patron de <filename>Makefile</filename> et quelques
  indications sur ses variables et fonctions :</para>


  <variablelist>
    <varlistentry xml:id='DIR'>
      <term><varname>DIR</varname></term>
      <listitem>
	<para>Nom du répertoire de travail courant dans lequel on place le(s)
	fichier(s) source(s) à traiter.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>DEPTH</varname></term>
      <listitem>
	<para>Profondeur du répertoire de travail relativement à la racine de
	l'arborescence de travail.</para>
      </listitem>
    </varlistentry>
    <varlistentry xml:id='SUBDIRS'>
      <term><varname>SUBDIRS</varname></term>
      <listitem>
	<para>Liste des sous-répertoires à traiter. Dans le cas du projet
	<citetitle>inetdoc.linux</citetitle>, un document DocBook de type
	«bibliographie» pointe vers plusieurs autres documents. Chacun de ces
	documents est placé dans un sous-répertoire différent.</para>
      </listitem>
    </varlistentry>
    <varlistentry xml:id='PROCESS_TYPE'>
      <term><varname>PROCESS_TYPE</varname></term>
      <listitem>
	<para>Liste des traitements à effectuer dans le répertoire de travail.
	Les différents types de traitements sont détaillés dans <xref
	linkend='autodoc.process.rules'/>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>XML_FILES</varname></term>
      <listitem>
	<para>Dans le cas d'un document DocBook ; liste des fichiers
	source. Dès qu'un document de cette liste est modifié, il faut
	reprendre le traitement</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>SYMLINKS</varname></term>
      <listitem>
	<para>Liste des liens symboliques à créer. Un document peut reprendre
	des éléments contenus dans d'autres répertoires. Les liens symboliques
	sont alors beaucoup plus utiles que les copies.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>all: dirs subdirs $(PROCESS_TYPE)</literal></term>
      <listitem>
	<para>Somme des traitements à effectuer :
	<itemizedlist>
	  <listitem>
	    <para><literal>dirs</literal> : création des répertoires
	    contenus dans la liste <xref linkend='DIR'/>.</para>
	  </listitem>
	  <listitem>
	    <para><literal>subdirs</literal> : création des sous-répertoires
	    contenus dans la liste <xref linkend='SUBDIRS'/>.</para>
	  </listitem>
	  <listitem>
	    <para><literal>$(PROCESS_TYPE)</literal> : traitements
	    spécifiques au(x) document(s) donnés dans la liste <xref
	    linkend='PROCESS_TYPE'/>.</para>
	  </listitem>
	  <listitem>
	    <para>autres traitements : dans le cas du répertoire <filename
	    class='directory'>sources</filename>, il s'agit de générer le
	    fichier de distribution des sources du projet.</para>
	  </listitem>
	</itemizedlist>
	</para>
      </listitem>
    </varlistentry>
  </variablelist>
  </sect2>

  <sect2 xml:id='autodoc.process.rules'>
    <title>Types de traitements</title>

  <para>L'ensemble des traitements existants sont définis dans le fichier de
  règles : <filename>Makefile.Rules</filename>. C'est ce fichier qu'il
  faut consulter pour connaître de détail des opérations effectuées.</para>

  <variablelist>
    <varlistentry>
      <term><varname>dirs</varname></term>
      <listitem>
	<para>Création des répertoires dans l'arborescence cible à partir de la
	racine définie par <varname>HTML_WRK</varname>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>subdirs</varname></term>
      <listitem>
	<para>Liste des sous-répertoires dans lesquels d'autres documents sont
	à traiter.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>clean</varname></term>
      <listitem>
	<para>Nettoyage de tous les fichiers intermédiaires générés lors des
	traitements. La liste des fichiers à effacer est extraite des
	propriétés <option>svn:ignore</option> des répertoires du dépôt
	<application>Subversion</application> (<acronym>SVN</acronym>).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>symlink</varname></term>
      <listitem>
	<para>Création des liens symboliques dans le répertoire de
	travail.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>file</varname></term>
      <listitem>
	<para>Copie simple de fichiers dans l'arborescence cible.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>html</varname></term>
      <listitem>
	<para>Passage à la lessiveuse <application>tidy</application> et copie
	du résultat dans l'arborescence cible.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>ld2www</varname></term>
      <listitem>
	<para>Génération des pages web à partir d'une source LinuxDoc sans
	oublier le passage par la lessiveuse.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>ld2print</varname></term>
      <listitem>
	<para>Génération des formats imprimables Postscript et PDF à partir
	d'une source LinuxDoc.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>_xml2xhtml</varname></term>
      <listitem>
	<para>Génération des pages web à partir d'une source DocBook sans
	oublier le passage par la lessiveuse.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>_xml2print</varname></term>
      <listitem>
	<para>Génération des formats imprimables Postscript et PDF à partir
	d'une source DocBook.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>_mgp2xhtml</varname></term>
      <listitem>
	<para>Génération d'une page web d'index des vues d'une présentation
	<citetitle>MagicPoint</citetitle> ainsi que d'une page web par
	vue.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>_mgp2print</varname></term>
      <listitem>
	<para>Génération des formats imprimables Postscript et PDF à partir
	d'une présentation <citetitle>MagicPoint</citetitle>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>_mgp2db</varname></term>
      <listitem>
	<para>Construction automatique d'un article DocBook à partir des copies
	d'écran des vues de présentation
	<citetitle>MagicPoint</citetitle>.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><varname>odp2xhtml</varname></term>
      <listitem>
	<para>Génération des pages web d'index et de vues à partir de
	l'exportation PDF d'une présentation <citetitle>OpenOffice.org
	Impress</citetitle>.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  </sect2>
</sect1>

<sect1 xml:id="autodoc.Changelog">
  <title>Journal des mises à jour : Changelog</title>

  <para>La documentation se gère comme le code source d'un logiciel. Les
  fichiers <acronym>XML</acronym> et les <filename>Makefiles</filename>
  représentent de code source du projet. Pour gérer les évolutions d'un volume
  important de code source dans le temps, il est essentiel d'utiliser un
  gestionnaire de contrôle de version.</para>

  <para>De façon à ce que les (lecteurs|utilisateurs) des documentations du
  projet puissent suivre les évolutions «en temps réel», il est très utile de
  générer une page web contenant le journal des mises à jour de l'ensemble du
  projet. Via un artifice de construction de ma page web personnelle sur le
  site Linux France (<acronym>AKA</acronym> <citetitle>lfo</citetitle>), ce
  journal est placé dans le fichier <filename>README.html</filename> à
  l'adresse : &url.README;.</para>

  <sect2 xml:id="autodoc.Changelog.CVS">
    <title>Génération de la page ChangeLog avec CVS</title>
    
  <para>Depuis le début du projet <citetitle>inetdoc.LiNUX</citetitle> en
  2001 jusqu'en Novembre 2005, le gestionnaire de contrôle de version était
  <application>CVS</application>. Pour générer le journal au format
  <acronym>XML</acronym>, il est nécessaire d'utiliser un script fourni dans le
  paquet du même nom  <systemitem>cvs2cl</systemitem>. Une fois le journal
  créé au format <acronym>XML</acronym>, on lui applique une feuille de styles
  <acronym>XSL</acronym> pour produire la page web «lisible» au format
  <acronym>XHTML</acronym>.</para>

  <para>Les règles de génération de la page web contenues dans le
  <filename>Makefile</filename> sont :</para>

  <para>La feuille de styles <acronym>XSL</acronym> utilisée pour produire la
  page web se présente comme suit :</para>
  
  </sect2>

  <sect2 xml:id="autodoc.Changelog.SVN">
    <title>Génération de la page ChangeLog avec SVN</title>

  <para>Depuis Novembre 2005, le gestionnaire de contrôle de version des
  fichiers sources utilisé pour le projet
  <citetitle>inetdoc.LiNUX</citetitle> est
  <systemitem>subversion</systemitem> (<acronym>AKA</acronym>
  <acronym>SVN</acronym>). Ce gestionnaire présente de nombreux avantages
  relativement au précédent (<acronym>CVS</acronym>). Il est possible de
  générer directement le journal des mises à jour au format
  <acronym>XML</acronym> sans avoir recours à un paquet supplémentaire. Il est
  cependant toujours nécessaire d'utiliser une feuille de styles
  <acronym>XSL</acronym> pour produire la page web au format
  <acronym>XHTML</acronym>.</para>

  <para>Depuis Avril 2007, le journal des mises à jour au format
  <acronym>XML</acronym> est modifié à l'aide d'un script perl de façon à
  ajouter les statistiques produites par la commande
  <command>diffstat</command> pour chaque fichier modifié. L'objectif de cette
  modification est de fournir une information sur l'importance des éditions sur
  les fichiers autodoc.</para>

  <para>Les règles de génération de la page web contenues dans le
  <filename>Makefile</filename> de génération et de publication du journal des
  éditions de fichiers source (<wordasword>Changelog</wordasword>)
  sont :</para>

<screen width='80'>.PHONY: $(TARGET_DIR)/README.html
$(TARGET_DIR)/README.html: common/asvn2cl.xsl
     svn log --xml --verbose \
     -r{`date --date 'tomorrow' +%Y-%m-%d`}:{`date --date '9 months ago' +%Y-%m-%d`} \
     &gt;changes.xml
     ./common/extract_changelog_diffstat.pl &lt;changes.xml &gt;changes.xml.new
     xsltproc -o $@ common/asvn2cl.xsl changes.xml.new
     rm -f changes.xml*
</screen>

  <para>Le script Perl de modification du journal <acronym>XML</acronym>
  effectue les transformations de balises suivantes :</para>

  <itemizedlist>
    <listitem>
    <para>Résultat produit par la commande <userinput>svn log --xml</userinput>.</para>
<screen width='80'>&lt;paths>
  &lt;path
    action="M">/trunk/prj/inetdoc/sources/autodoc.xml&lt;path>
&lt;paths>
</screen>
    </listitem>
    <listitem>
    <para>Résultat après transformation par le script
    <filename>extract_changelog_diffstat.pl</filename>.</para>
<screen width='80'>&lt;objects>
&lt;object>
&lt;path
  action="M">/trunk/prj/inetdoc/sources/autodoc.xml&lt;path>
  &lt;stats>14 +++++++-------&lt;stats>
  &lt;object>
&lt;objects>
</screen>
    </listitem>
  </itemizedlist>

  <para>Le script Perl <filename>extract_changelog_diffstat.pl</filename> de
  modification du journal est donné dans l'<xref
  linkend='autodoc.changelog_diffstat'/>.</para>

  </sect2>
</sect1>

<appendix xml:id='autodoc.changelog_diffstat'>
  <title>Script de transformation du journal XML de Subversion</title>

  <para>Ce script Perl modifie les balises <acronym>XML</acronym> du journal
  produit par la commande <userinput>svn log --xml</userinput> en y ajoutant le
  résultat de la commande <command>diffstat</command>. Le nouveau jeu de
  balises est donné dans la <xref linkend='autodoc.Changelog.SVN'/>.</para>

</appendix>

</article>
