TITLE: G&#233;n&#233;ration automatis&#233;e de cl&#233; pour SSH sur un commutateur Cisco
AUTHOR: Philippe Latu
DATE: lundi 2 juin 2014, 21:49:12 (UTC+0200)
DESC: 
FORMAT: raw
-----
BODY:
<div class="informaltable">
<table width="100%" border="0">
<colgroup>
<col style="text-align: left" />
<col style="text-align: left" /></colgroup>
<tbody>
<tr>
<td style="text-align: left" valign="top">
<p>Pour qui à l'habitude de l'arborescence des systèmes Unix, la gestion du
système de fichiers de l'IOS de Cisco est pour le moins «singulière». Ce billet
illustre les mésaventures rencontrées dans la gestion des configuration des
commutateurs 2960 et 3560.</p>

<p>Au départ, mon objectif est de rendre systématique l'utilisation de
<tt>SSH</tt> pour l'accès à l'interface de configuration (<tt>CLI</tt>) des
commutateurs des salles de travaux pratiques. Dans ce but, j'ai créé des
patrons de fichiers de configuration dans lesquels figurait la commande de
génération de clé. Une fois le commutateur relancé, la première tentative de
connexion échoue. Mauvaise surprise !</p>

<p>Voyons si la génération de clés <tt>RSA</tt> peut être déclenchée
automatiquement.</p>
</td>
<td style="text-align: left"><span class=
"inlinemediaobject"><img src="https://www.inetdoc.net/images/thumbs/thumb013.png" width=
"180px" /></span></td>
</tr>
</tbody>
</table>
</div>

<h3>Tout d'abord, les choses qui fâchent</h3>

<p>Comme annoncé, tout débute par une grosse déconvenue :</p>

<pre>$ ssh admin@sw09-213.infra.stri
ssh: connect to host sw09-213.infra.stri port 22: <span style="color:red">Connection refused</span></pre>

<p>En redémarrant le commutateur avec le cordon console connecté et l'outil
<span class="application">minicom</span> lancé, on relève le message suivant
:</p>

<pre><span style="color:red">% Rsa keys can't be generated by the startup configuration</span></pre>

<p>Après moultes recherches, notamment sur <a
href="https://supportforums.cisco.com/">Cisco Technical Support Forum</a>,
l'argument qui explique ce comportement s'appuie sur le fait que la génération
de clé est une opération unique effectuée lors du déploiement d'un équipement.
Le premier message d'erreur ci-dessus est dû au fait que la clé n'a pas été
générée et/ou sauvegardée. Or, dans un contexte de travaux pratiques, les
configurations sont constamment effacées et réécrites. Nous sommes donc amenés
à la question du lieu de stockage de clé.</p>

<p>Au niveau <strong>CCNA</strong> on apprend que, sur un commutateur, tout est
stocké en mémoire flash. Nous devons donc observer le contenu de cette mémoire
flash parallèlement aux opérations sur les clés.</p>

<pre>sw09-213#sh flash: 

Directory of flash:/

    2  -rwx       10227  May 30 2014 11:26:18 +02:00  recovery-confg
    3  -rwx         556   Mar 1 1993 01:00:39 +01:00  vlan.dat
    4  -rwx    11792247  May 27 2014 22:34:31 +02:00  c2960-lanbasek9-mz.150-2.SE6.bin
    5  -rwx        3096  May 30 2014 11:46:43 +02:00  multiple-fs
    6  -rwx           5  May 30 2014 11:46:43 +02:00  <span style="color:darkblue">private-config.text</span>
    7  -rwx       16165  May 30 2014 11:46:43 +02:00  <span style="color:darkgreen">config.text</span>

32514048 bytes total (20688896 bytes free)</pre>

<p>Les deux fichiers de configuration sont marqués en couleur dans la copie d'écran ci-dessus.<p>

<ul>
<li>Le fichier <span style="color:darkgreen">config.text</span> contient la
configuration du commutateur utilisée lors d'un redémarrage.</li>
<li>Le fichier <span style="color:darkblue">private-config.text</span> ne
contient pas grand chose pour l'instant ; vu sa taille.</li>
</ul>

<p>Allons-y pour la génération de clé. J'avais publié un billet «façon antisèche»
sur cette question il y a quelques temps déjà : <a
href='https://www.inetdoc.net/archives/2012/05/25/compte_utilisateur_local__38_acc_232s_ssh_sur_un__233quipement_cisco/index.html'>Compte
utilisateur local &amp; accès SSH sur un équipement Cisco</a>. On reprend la
démarche après avoir vérifié qu'aucune clé n'est déjà présente dans la
configuration courante.</p>

<pre>sw09-213#sh crypto key mypubkey all
sw09-213#
sw09-213#conf t
Enter configuration commands, one per line.  End with CNTL/Z.
sw09-213(config)#crypto key generate rsa label SSH-KEY modulus 4096
The name for the keys will be: SSH-KEY

% The key modulus size is 4096 bits
% Generating 4096 bit RSA keys, keys will be non-exportable...
[OK] (elapsed time was 504 seconds)

000023: May 30 14:54:30.551 MET: <span style="color:red">%SSH-5-ENABLED: SSH 2.0 has been enabled</span></pre>

<p>On remarque que le service <tt>SSH</tt> s'est activé immédiatement après la
création de clé. On peut aussi visualiser le résultat de l'opération en
rappelant la commande <b>sh crypto key mypubkey all</b>.</p>

<p>Si on réinitialise le commutateur maintenant, tout le travail de génération
de clé sera perdu sachant qu'aucune sauvegarde n'a encore été effectuée. C'est
là que la bizarrerie commence. La seule commande de sauvegarde dont nous
disposons est la suivante :</p>

<pre>sw09-213#copy run start
Building configuration...
[OK]
sw09-213#sh flash: | incl config
    7  -rwx        <span style="color:red">6820</span>  May 30 2014 15:00:54 +02:00  <span style="color:darkblue">private-config.text</span>
    8  -rwx       16165  May 30 2014 15:00:54 +02:00  config.text</pre>

<p>Alors que le fichier <span style="color:darkgreen">config.text</span> n'a
pas changé de taille, le fichier <span
style="color:darkblue">private-config.text</span> est passé de 5 à 6820 octets.
Notre clé est stockée dans ce dernier fichier. La commande <b>copy
running-config startup-config</b> copie les clés dans la mémoire flash: en plus
de la configuration courante du système.</p>

<p>L'effacement fonctionne comme la copie. La commande <b>erase
startup-config</b> efface les deux fichiers <span
style="color:darkblue">private-config.text</span> et <span
style="color:darkgreen">config.text</span>. Au redémarrage suivant, le
commutateur a perdu sa configuration et son jeu de clés <tt>RSA</tt>.
Malheureusement, il semble qu'il soit impossible de préserver une copie de
sauvegarde du fichier <span style="color:darkblue">private-config.text</span>.
Seul le fichier <span style="color:darkgreen">config.text</span> peut être
recopié en mémoire flash.</p>

<p>Une fois que les manipulations sont terminées, l'utilisation de la commande
<b>erase startup-config</b> est recommandée dans tous les supports de travaux
pratiques des curriculums Cisco. Il semble donc que nous soyons dans
l'impasse.</p>

<h3>Kron à la rescousse</h3>

<p>Fort heureusement, nous pouvons contourner la difficulté grâce au service de
planification des tâches baptisé <span class="application">kron</span>. Bien
entendu, ce service est loin d'offrir les possibilités d'un <span
class="application">cron</span> Unix. Sur les modèles de commutateurs 2960, il
est seulement possible d'exécuter des commandes dites <b>globales</b>. Il n'est
pas possible d'entrer directement dans le terminal de configuration.</p>

<p>Cependant, il est possible de charger un fichier contenant une suite de
commandes de configuration via <tt>TFTP</tt> ou d'autres protocoles comme
<tt>FTP</tt> ou <tt>HTTP</tt>. Les commandes contenues dans le fichier sont
exécutées directement si la destination du transfert est le niveau d'exécution
courant : <b>system:/running-config</b>.</p>

<p>Voici une copie de la partie intéressante du patron de configuration d'un
commutateur.</p>

<pre>!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!~~~~~~~~~      kron
!
file prompt quiet
!
kron occurrence <span style="color:orange">crypto-key</span> in 3 oneshot
 policy-list crypto-key
!
kron occurrence backup-startup in 30 oneshot
 policy-list backup-startup
!
kron policy-list crypto-key
 <span style="color:orange">cli copy tftp://cooper/crypto-key-confg running-config</span>
!
kron policy-list backup-startup
 cli delete /force flash:recovery-confg
 cli copy startup-config flash:recovery-confg
 cli copy running-config startup-config
!
end</pre>

<p>On relève deux suites d'instructions.</p>

<ul>
<li>
<p>La première phase baptisée <span
style="color:orange"><tt>crypto-key</tt></span> est exécutée un seule fois 3
minutes après l'initialisation du commutateur. C'est ce «script» qui sert à
provoquer la génération de clé.</p>

<pre>$ cat /srv/tftp/crypto-key-confg 
! Génération de clés RSA pour SSH
crypto key generate rsa label SSH-KEY modulus 4096
!
end</pre>
</li>
<li>
<p>La seconde phase baptisée <tt>backup-startup</tt> est aussi exécutée une
seule fois au bout de 30 minutes après l'initialisation. Son but est de
sauvegarder le jeu de clés <tt>RSA</tt>.</p>
</li>
</ul>

<p>Attention ! Le choix des temps avant exécution des commandes n'est pas
anodin. Il faut être sûr que le lien montant est actif et que le serveur
<tt>TFTP</tt> est joignable avant de lancer un téléchargement. On tient compte
notamment, du temps de convergence du protocole <b>Spanning Tree</b>.</p>

<p>Au final, on obtient les informations suivantes dans les journaux
système. Le jeu de clés a bien été généré et il est enfin possible d'accéder au
commutateur via <tt>SSH</tt>.</p>

<pre>000020: Jun  2 18:58:36.092 MET: %SSH-5-ENABLED: SSH 2.0 has been enabled
000021: Jun  2 18:58:43.004 MET: %SYS-5-CONFIG_I: Configured from tftp://cooper/crypto-key-confg by admin on console</pre>

<p>Cette méthode fonctionne aussi sur les commutateurs Cisco de la gamme
supérieure comme les 3560 ou 3750.</p>

<p>Pour conclure, j'espère que ce billet pourra servir à quelques
administrateurs d'équipements réseau et leur fera économiser un peu de temps
pour faire des choses plus intéressantes. Avec ce genre de «Hack à 2€cts» nous
sommes encore bien loin du <i>Software Defined Network</i>.</p>

END-----
