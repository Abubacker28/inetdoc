TITLE: Raspbian &#38; IPv6
AUTHOR: Philippe Latu
DATE: vendredi 2 janvier 2015, 18:18:32 (UTC+0100)
DESC: 
FORMAT: raw
-----
BODY:
<p>En configurant une nouvelle carte <a
href='http://www.raspberrypi.org/products/model-b-plus/'>Raspberry Pi B+</a>,
j'ai redécouvert le fait que le protocole IPv6 n'est pas activé par défaut sur
le système. C'est vraiment dommage dans un contexte où l'objet «Raspberry Pi
B+» doit être nécessairement raccordé à l'Internet. En effet, il est
particulièrement intéressant de pouvoir accéder via SSH à la carte sans avoir
enregistré quoi que ce soit dans les services DHCP et DNS. L'autoconfiguration
IPv6 prend tout son sens dans ce contexte.</p>

<h3>Étape 1 : activer IPv6</h3>

<p>Sur un système <a href='http://www.raspbian.org/'>Raspbian</a> fraichement
installé, le support du protocole IPv6 n'est pas activé. Il apparaît que le
protocole a été compilé sous forme de module dans le noyau de la
distribution. La première manipulation à faire consiste donc à activer le
chargement du module.</p>

<p>Les options de chargement des modules sont contrôlées via les fichiers
placés dans le répertoire <tt>/etc/modprobe.d</tt>. Dans ce répertoire, on
trouve un fichier <tt>ipv6.conf</tt> dont le contenu est le suivant :</p>

<pre># Don't load ipv6 by default
<span style="color:red">alias net-pf-10 off</span>
#alias ipv6 off</pre>

<p>Il suffit de commenter la ligne en rouge qui désactive la famille de
protocole numéro 10 dans le noyau Linux et de redémarrer le système pour
bénéficier du support IPv6. Le contenu du fichier devient :</p>

<pre># Don't load ipv6 by default
<span style="color:green">#alias net-pf-10 off</span>
#alias ipv6 off</pre>

<p>Une fois le redémarrage achevé, le module <tt>ipv6</tt> est automatiquement
chargé en mémoire.</p>

<pre>$ lsmod | egrep -e '(Module|ipv6)'
Module                  Size  Used by
<span style="color:green">ipv6                  316254  22</span></pre>

<p>Là, il faut bien reconnaître que c'est le module <tt>ipv6</tt> qui occupe le
plus de mémoire dans la liste complète des modules chargés en mémoire.</p>

<p>Il est maintenant possible d'accéder à la carte via SSH en utilisant les
adresses de type lien local.</p>

<pre>pi@raspberrypi ~ $ ip addr ls
1: lo: &#60;LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eth0: &#60;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether b8:27:eb:82:b2:64 brd ff:ff:ff:ff:ff:ff
    inet6 <span style="color:green">fe80::ba27:ebff:fe82:b264/64</span> scope link
       valid_lft forever preferred_lft forever</pre>

<p>Une adresse de type lien local appartient au préfixe <tt>fe80::/10</tt> et
est composée automatiquement à partir de l'adresse <tt>MAC</tt> au format
<a
href='https://www.inetdoc.net/articles/inter-vlan-routing/inter-vlan-routing.lan.html#inter-vlan-routing.lan.mac-address'>EUI-64</a>.
Dans l'exemple ci-dessus, on reconnaît l'insertion des deux octets
<tt>ff:fe</tt> au milieu de l'adresse <tt>MAC</tt> d'origine qui apparaît sur
la ligne au-dessus.</p>

<p>L'accès SSH à l'aide de l'adresse de type lien local se fait comme suit
:</p>

<pre>phil@myhostname:~$ <span style="color:green">ssh pi@fe80::ba27:ebff:fe82:b264</span><span style="color:red">%eth0</span>
pi@fe80::ba27:ebff:fe82:b264%eth0's password: 
Linux raspberrypi 3.12.35+ #730 PREEMPT Fri Dec 19 18:31:24 GMT 2014 armv6l

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Jan  3 15:49:24 2015 from fe80::226:18ff:fe27:7b9%eth0</pre>

<p>La seule particularité de cet accès tient au fait qu'il est nécessaire de
désigner l'interface du domaine de diffusion à utiliser. Ici, la notation <span
style="color:red">%eth0</span> impose l'utilisation du réseau Ethernet sur
lequel l'interface <tt>eth0</tt> est raccordée.</p>

<h3>Étape 2 : autoconfiguration IPv6</h3>

<p>Si l'étape précédente ne nécessite aucun service d'infrastructure,
l'affectation d'une adresse IPv6 visible sur l'Internet suppose qu'un routeur
IPv6 déjà configuré se charge de l'attribution des paramètres de l'interface
réseau. Sur le système <a href='http://www.raspbian.org/'>Raspbian</a>, il faut
ajouter deux lignes au fichier <tt>/etc/network/interfaces</tt>.</p>

<pre>auto lo

iface lo inet loopback
iface eth0 inet dhcp
<span style="color:green">iface eth0 inet6 auto</span>

allow-hotplug wlan0
iface wlan0 inet manual
wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
iface default inet dhcp
<span style="color:green">iface default inet6 auto</span></pre>

<p>Après réinitialisation de l'interface active à l'aide des commandes <tt>sudo
ifdown eth0</tt> et <tt>sudo ifup eth0</tt>, l'autoconfiguration IPv6 peut
s'effectuer. On visualise ci-dessous les adresses ainsi que la table de
routage.</p>

<pre>$ ip -6 addr ls
1: lo: &#60;LOOPBACK,UP,LOWER_UP> mtu 65536 
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &#60;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qlen 1000
    <span style="color:green">inet6 2001:db8:fe00:814f:ba27:ebff:fe82:b264/64 scope global dynamic</span>
       valid_lft 86368sec preferred_lft 14368sec
    <span style="color:green">inet6 fe80::ba27:ebff:fe82:b264/64 scope link</span>
       valid_lft forever preferred_lft forever</pre>

<pre>$ ip -6 ro ls
2001:db8:fe00:814f::/64 dev eth0  proto kernel  metric 256  expires 86251sec
fe80::/64 dev eth0  proto kernel  metric 256 
default via fe80::ba27:ebff:feea:2972 dev eth0  proto ra  metric 1024  expires 1651sec</pre>

<p>Pour compléter l'autoconfiguration, on ajoute le traitement des annonces <a
href='https://www.inetdoc.net/articles/autoconf-ipv6/autoconf-ipv6.glossary.html#rdnss'>RDNSS</a>
qui va servir à configurer le <i>resolver</i> DNS.</p>

<pre>$ sudo aptitude install rdnssd
Les NOUVEAUX paquets suivants vont être installés : 
  rdnssd resolvconf{a}</pre>

<p>On relève le résultat dans le fichier <tt>/etc/resolv.conf</tt> après
réinitialisation de l'interface active.</p>

<pre># Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 2001:db8:fe00:814f::1
search mydomain</pre>

<h3>Étape 3 : multicast DNS</h3>

<p>Pour terminer, on ajoute le service multicast DNS au système. Manipuler des
adresses IPv6 sous forme numérique peut s'avérer très fastidieux. Alors
pourquoi ne pas bénéficier d'une résolution des noms d'hôtes sans passer par
les enregistrements DNS «classiques» ?</p>

<p>On installe deux paquets supplémentaires ainsi que les dépendances
associées.</p>

<pre>$ sudo aptitude install avahi-daemon avahi-utils
Les NOUVEAUX paquets suivants vont être installés : 
  avahi-daemon avahi-utils bind9-host{a} libavahi-core7{a} libbind9-80{a} libdns88{a} libisc84{a} libisccc80{a} libisccfg82{a} liblwres80{a} libnss-mdns{a} 
0 paquets mis à jour, 11 nouvellement installés, 0 à enlever et 0 non mis à jour.
Il est nécessaire de télécharger 1 420 ko d'archives. Après dépaquetage, 3 360 ko seront utilisés.</pre>

<p>Une fois les paquets installés, il reste une ultime édition de fichier. La
recherche de noms <tt>mdns</tt> ne doit pas être restreinte au seul protocole
IPv4. On modifie donc le fichier <tt>/etc/nsswicth.conf</tt> comme
ci-dessous.</p>

<pre># /etc/nsswitch.conf
#
# Example configuration of GNU Name Service Switch functionality.
# If you have the `glibc-doc-reference' and `info' packages installed, try:
# `info libc "Name Service Switch"' for information about this file.

passwd:         compat
group:          compat
shadow:         compat

<span style="color:green">hosts:          files mdns_minimal [NOTFOUND=return] dns mdns</span>
networks:       files

protocols:      db files
services:       db files
ethers:         db files
rpc:            db files

netgroup:       nis</pre>

<p>Sur la ligne en vert ci-dessus, on a retiré les chiffres 4 pour les
paramètres <tt>mdns</tt>.</p>

<h3>Et voilà !</h3>

<p>On accède maintenant à notre objet de l'Internet via son nom dans le <i>Top
Level Domain</i> <tt>.local</tt>.</p>

<pre>$ ssh pi@<span style="color:purple">raspberrypi.local</span>
The authenticity of host '<span style="color:purple">raspberrypi.local (2001:db8:fe00:814f:ba27:ebff:fe82:b264)</span>' can't be established.
ECDSA key fingerprint is 4f:f9:17:ba:bf:57:16:a9:64:12:b7:e0:2b:51:7d:26.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '<span style="color:purple">raspberrypi.local,2001:db8:fe00:814f:ba27:ebff:fe82:b264</span>' (ECDSA) to the list of known hosts.
pi@raspberrypi.local's password: 
Linux raspberrypi 3.12.35+ #730 PREEMPT Fri Dec 19 18:31:24 GMT 2014 armv6l

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Jan  3 18:32:25 2015 from fe80::226:18ff:fe27:7b9%eth0</pre>

<p>pour conclure, même si les configurations proposées dans ce billet ont une
empreinte mémoire non nulle, je dirai qu'elles facilitent beaucoup l'utilisation
de la connexion réseau sans qu'il soit nécessaire de déployer un jeu de
services complet par ailleurs. Les «grands débutants» pourraient aborder plus
facilement les outils disponibles sur ces nouveaux objets connectés à
l'Internet.</p>

END-----
